(function(){
  // Generated by LiveScript 1.5.0
  /** Please Don't Modify These Lines Below   */
  /** --------------------------------------- */
  var SchemaBaseClass, MANIFEST, Sensorboard, roots;
  SchemaBaseClass = (function(){
    SchemaBaseClass.displayName = 'SchemaBaseClass';
    var prototype = SchemaBaseClass.prototype, constructor = SchemaBaseClass;
    function SchemaBaseClass(){
      this.sensors = {};
      this.actuators = {};
    }
    SchemaBaseClass.prototype.declareSensors = function(typesAndIdentities){
      var self, st, identities, lresult$, i$, len$, id, results$ = [];
      self = this;
      for (st in typesAndIdentities) {
        identities = typesAndIdentities[st];
        lresult$ = [];
        self.sensors[st] = {};
        for (i$ = 0, len$ = identities.length; i$ < len$; ++i$) {
          id = identities[i$];
          lresult$.push(self.sensors[st][id] = {});
        }
        results$.push(lresult$);
      }
      return results$;
    };
    return SchemaBaseClass;
  }());
  if (typeof SCHEMA_BASE_CLASS != 'undefined' && SCHEMA_BASE_CLASS !== null) {
    SchemaBaseClass = SCHEMA_BASE_CLASS;
  }
  /** --------------------------------------- */
  /** Please Don't Modify These Lines Above   */
  MANIFEST = {
    name: 'cnsc-cdc',
    version: '0.1.1'
  };
  Sensorboard = (function(superclass){
    var prototype = extend$((import$(Sensorboard, superclass).displayName = 'Sensorboard', Sensorboard), superclass).prototype, constructor = Sensorboard;
    Sensorboard.prototype.humidity = [
      {
        field: 'temperature',
        unit: 'degree_c',
        value: ['float', [-40.0, 80.0]]
      }, {
        field: 'humidity',
        unit: '%rH',
        value: ['int', [0, 100]]
      }
    ];
    Sensorboard.prototype.waterlevel = [{
      field: 'value',
      unit: '',
      value: ['boolean', ['no', 'yes']]
    }];
    Sensorboard.prototype.ndir_co2 = [{
      field: 'co2',
      unit: 'ppm',
      value: ['int', [400, 10000]],
      $keep_error: true
    }];
    Sensorboard.prototype.ambient_light = [{
      field: 'illuminance',
      unit: 'lux',
      value: ['int', [0, 64000]],
      $keep_error: false
    }];
    Sensorboard.prototype.fan = [
      {
        field: 'pwm',
        unit: '',
        value: ['int', [1, 2395]],
        writeable: true,
        $keep_error: true
      }, {
        field: 'percentage',
        unit: '%',
        value: ['int', [0, 100]],
        writeable: true
      }
    ];
    Sensorboard.prototype.led = [
      {
        field: 'pwm',
        unit: '',
        value: ['int', [1, 2395]],
        writeable: true,
        $keep_error: true
      }, {
        field: 'percentage',
        unit: '%',
        value: ['int', [0, 100]],
        writeable: true
      }
    ];
    Sensorboard.prototype.pump = [{
      field: 'vibration',
      unit: '',
      value: ['boolean', ['no', 'yes']],
      writeable: true
    }];
    Sensorboard.prototype.emoji = [
      {
        field: 'value',
        value: ['int', [0, 600], 1],
        writeable: true
      }, {
        field: 'mode',
        value: ['enum', ['ascii', 'pre_installed_image', 'post_installed_image', 'number', 'pre_installed_animation', 'post_installed_animation']]
      }, {
        field: 'index',
        value: ['int', [0, 128]]
      }
    ];
    Sensorboard.prototype.led_matrix = [{
      field: 'value',
      $prefix: 'LM',
      value: ['int', [0, 600]]
    }];
    function Sensorboard(){
      Sensorboard.superclass.call(this);
      this.declareSensors({
        humidity: ['inside', 'outside'],
        waterlevel: ['top1', 'top2'],
        ndir_co2: ['0'],
        ambient_light: ['0'],
        fan: ['left', 'right'],
        led: ['0'],
        pump: ['0'],
        emoji: ['0']
      });
      this.sensors['humidity'].inside = {
        prefix: {
          temperature: 'TI',
          humidity: 'HI'
        },
        model: 'st221'
      };
      this.sensors['humidity'].outside = {
        prefix: {
          temperature: 'TE',
          humidity: 'HE'
        },
        model: 'st221'
      };
      this.sensors['waterlevel'].top1 = {
        prefix: {
          value: 'W'
        }
      };
      this.sensors['waterlevel'].top2 = {
        prefix: {
          value: 'W1'
        }
      };
      this.sensors['ndir_co2'][0] = {
        prefix: {
          co2: 'C'
        },
        model: 'ds-t-110'
      };
      this.sensors['ambient_light'][0] = {
        prefix: {
          illuminance: 'L'
        },
        model: 'ltr-303als-01'
      };
      this.sensors['fan'].left = {
        prefix: {
          pwm: 'FSA'
        },
        model: 'EFC0812DBYLK'
      };
      this.sensors['fan'].right = {
        prefix: {
          pwm: 'FSB'
        },
        model: 'EFC0812DBYLK'
      };
      this.sensors['led'][0] = {
        prefix: {
          pwm: 'LD'
        },
        model: 'HL3528A-DQM-LF030T1-26501'
      };
      this.sensors['pump'][0] = {
        prefix: {
          vibration: 'PO'
        },
        model: 'xyz-999'
      };
      this.sensors['emoji'][0] = {
        prefix: {
          value: 'LM'
        },
        model: 'www-123'
      };
      this.actuators['emoji'] = [
        {
          action: 'show_number',
          argument: ['int', [0, 99], 1],
          $action_prefix: 'LMN'
        }, {
          action: 'show_ascii',
          argument: ['int', [0, 127], 1],
          $action_prefix: 'LMA'
        }, {
          action: 'show_animation',
          argument: ['int', [0, 38], 1],
          $action_prefix: 'LMF'
        }
      ];
    }
    return Sensorboard;
  }(SchemaBaseClass));
  roots = {
    Sensorboard: Sensorboard
  };
  /** Please Don't Modify These Lines Below   */
  /** --------------------------------------- */
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  var classes = {MANIFEST: MANIFEST, Sensorboard: Sensorboard};
  module.exports = {roots: roots, classes: classes, manifest: MANIFEST};
}).call(this);